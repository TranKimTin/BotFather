// Generated from src/Expr.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class ExprLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly T__23 = 24;
    public static readonly T__24 = 25;
    public static readonly T__25 = 26;
    public static readonly T__26 = 27;
    public static readonly T__27 = 28;
    public static readonly INT = 29;
    public static readonly FLOAT = 30;
    public static readonly STRING = 31;
    public static readonly WS = 32;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'rsi'", "','", 
        "'broker'", "'symbol'", "'timeframe'", "'hour'", "'minute'", "'open'", 
        "'high'", "'low'", "'close'", "'volume'", "'volume24h_in_usd'", 
        "'change'", "'change%'", "'ampl'", "'ampl%'", "'>'", "'>='", "'<'", 
        "'<='", "'='"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, "INT", "FLOAT", "STRING", 
        "WS"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", 
        "T__24", "T__25", "T__26", "T__27", "INT", "FLOAT", "STRING", "WS",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, ExprLexer._ATN, ExprLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Expr.g4"; }

    public get literalNames(): (string | null)[] { return ExprLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return ExprLexer.symbolicNames; }
    public get ruleNames(): string[] { return ExprLexer.ruleNames; }

    public get serializedATN(): number[] { return ExprLexer._serializedATN; }

    public get channelNames(): string[] { return ExprLexer.channelNames; }

    public get modeNames(): string[] { return ExprLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,32,252,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
        23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,3,
        28,203,8,28,1,28,4,28,206,8,28,11,28,12,28,207,1,29,3,29,211,8,29,
        1,29,4,29,214,8,29,11,29,12,29,215,1,29,1,29,4,29,220,8,29,11,29,
        12,29,221,3,29,224,8,29,1,29,1,29,3,29,228,8,29,1,29,4,29,231,8,
        29,11,29,12,29,232,3,29,235,8,29,1,30,1,30,5,30,239,8,30,10,30,12,
        30,242,9,30,1,30,1,30,1,31,4,31,247,8,31,11,31,12,31,248,1,31,1,
        31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,5,1,
        0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,10,10,13,13,39,39,
        3,0,9,10,13,13,32,32,262,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,
        1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,
        77,1,0,0,0,15,81,1,0,0,0,17,83,1,0,0,0,19,90,1,0,0,0,21,97,1,0,0,
        0,23,107,1,0,0,0,25,112,1,0,0,0,27,119,1,0,0,0,29,124,1,0,0,0,31,
        129,1,0,0,0,33,133,1,0,0,0,35,139,1,0,0,0,37,146,1,0,0,0,39,163,
        1,0,0,0,41,170,1,0,0,0,43,178,1,0,0,0,45,183,1,0,0,0,47,189,1,0,
        0,0,49,191,1,0,0,0,51,194,1,0,0,0,53,196,1,0,0,0,55,199,1,0,0,0,
        57,202,1,0,0,0,59,210,1,0,0,0,61,236,1,0,0,0,63,246,1,0,0,0,65,66,
        5,42,0,0,66,2,1,0,0,0,67,68,5,47,0,0,68,4,1,0,0,0,69,70,5,43,0,0,
        70,6,1,0,0,0,71,72,5,45,0,0,72,8,1,0,0,0,73,74,5,40,0,0,74,10,1,
        0,0,0,75,76,5,41,0,0,76,12,1,0,0,0,77,78,5,114,0,0,78,79,5,115,0,
        0,79,80,5,105,0,0,80,14,1,0,0,0,81,82,5,44,0,0,82,16,1,0,0,0,83,
        84,5,98,0,0,84,85,5,114,0,0,85,86,5,111,0,0,86,87,5,107,0,0,87,88,
        5,101,0,0,88,89,5,114,0,0,89,18,1,0,0,0,90,91,5,115,0,0,91,92,5,
        121,0,0,92,93,5,109,0,0,93,94,5,98,0,0,94,95,5,111,0,0,95,96,5,108,
        0,0,96,20,1,0,0,0,97,98,5,116,0,0,98,99,5,105,0,0,99,100,5,109,0,
        0,100,101,5,101,0,0,101,102,5,102,0,0,102,103,5,114,0,0,103,104,
        5,97,0,0,104,105,5,109,0,0,105,106,5,101,0,0,106,22,1,0,0,0,107,
        108,5,104,0,0,108,109,5,111,0,0,109,110,5,117,0,0,110,111,5,114,
        0,0,111,24,1,0,0,0,112,113,5,109,0,0,113,114,5,105,0,0,114,115,5,
        110,0,0,115,116,5,117,0,0,116,117,5,116,0,0,117,118,5,101,0,0,118,
        26,1,0,0,0,119,120,5,111,0,0,120,121,5,112,0,0,121,122,5,101,0,0,
        122,123,5,110,0,0,123,28,1,0,0,0,124,125,5,104,0,0,125,126,5,105,
        0,0,126,127,5,103,0,0,127,128,5,104,0,0,128,30,1,0,0,0,129,130,5,
        108,0,0,130,131,5,111,0,0,131,132,5,119,0,0,132,32,1,0,0,0,133,134,
        5,99,0,0,134,135,5,108,0,0,135,136,5,111,0,0,136,137,5,115,0,0,137,
        138,5,101,0,0,138,34,1,0,0,0,139,140,5,118,0,0,140,141,5,111,0,0,
        141,142,5,108,0,0,142,143,5,117,0,0,143,144,5,109,0,0,144,145,5,
        101,0,0,145,36,1,0,0,0,146,147,5,118,0,0,147,148,5,111,0,0,148,149,
        5,108,0,0,149,150,5,117,0,0,150,151,5,109,0,0,151,152,5,101,0,0,
        152,153,5,50,0,0,153,154,5,52,0,0,154,155,5,104,0,0,155,156,5,95,
        0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,95,0,0,159,160,
        5,117,0,0,160,161,5,115,0,0,161,162,5,100,0,0,162,38,1,0,0,0,163,
        164,5,99,0,0,164,165,5,104,0,0,165,166,5,97,0,0,166,167,5,110,0,
        0,167,168,5,103,0,0,168,169,5,101,0,0,169,40,1,0,0,0,170,171,5,99,
        0,0,171,172,5,104,0,0,172,173,5,97,0,0,173,174,5,110,0,0,174,175,
        5,103,0,0,175,176,5,101,0,0,176,177,5,37,0,0,177,42,1,0,0,0,178,
        179,5,97,0,0,179,180,5,109,0,0,180,181,5,112,0,0,181,182,5,108,0,
        0,182,44,1,0,0,0,183,184,5,97,0,0,184,185,5,109,0,0,185,186,5,112,
        0,0,186,187,5,108,0,0,187,188,5,37,0,0,188,46,1,0,0,0,189,190,5,
        62,0,0,190,48,1,0,0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,50,1,
        0,0,0,194,195,5,60,0,0,195,52,1,0,0,0,196,197,5,60,0,0,197,198,5,
        61,0,0,198,54,1,0,0,0,199,200,5,61,0,0,200,56,1,0,0,0,201,203,5,
        45,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,206,7,
        0,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,
        0,0,0,208,58,1,0,0,0,209,211,5,45,0,0,210,209,1,0,0,0,210,211,1,
        0,0,0,211,213,1,0,0,0,212,214,7,0,0,0,213,212,1,0,0,0,214,215,1,
        0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,223,1,0,0,0,217,219,5,
        46,0,0,218,220,7,0,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,
        0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,217,1,0,0,0,223,224,1,
        0,0,0,224,234,1,0,0,0,225,227,7,1,0,0,226,228,7,2,0,0,227,226,1,
        0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,7,0,0,0,230,229,1,
        0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,
        0,0,0,234,225,1,0,0,0,234,235,1,0,0,0,235,60,1,0,0,0,236,240,5,39,
        0,0,237,239,8,3,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,
        0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,39,
        0,0,244,62,1,0,0,0,245,247,7,4,0,0,246,245,1,0,0,0,247,248,1,0,0,
        0,248,246,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,6,31,0,
        0,251,64,1,0,0,0,12,0,202,207,210,215,221,223,227,232,234,240,248,
        1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ExprLexer.__ATN) {
            ExprLexer.__ATN = new antlr.ATNDeserializer().deserialize(ExprLexer._serializedATN);
        }

        return ExprLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ExprLexer.literalNames, ExprLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ExprLexer.vocabulary;
    }

    private static readonly decisionsToDFA = ExprLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}