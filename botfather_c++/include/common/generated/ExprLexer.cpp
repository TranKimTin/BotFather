
// Generated from src/common/Expr.g4 by ANTLR 4.13.1


#include "ExprLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ExprLexerStaticData final {
  ExprLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ExprLexerStaticData(const ExprLexerStaticData&) = delete;
  ExprLexerStaticData(ExprLexerStaticData&&) = delete;
  ExprLexerStaticData& operator=(const ExprLexerStaticData&) = delete;
  ExprLexerStaticData& operator=(ExprLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag exprlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
ExprLexerStaticData *exprlexerLexerStaticData = nullptr;

void exprlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (exprlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(exprlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<ExprLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", 
      "T__73", "T__74", "INT", "FLOAT", "STRING", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'*'", "'/'", "'+'", "'-'", "'('", "')'", "'abs('", "'min('", 
      "','", "'max('", "'hour'", "'minute'", "'open'", "'high'", "'low'", 
      "'close'", "'volume'", "'change'", "'change%'", "'ampl'", "'ampl%'", 
      "'upper_shadow'", "'upper_shadow%'", "'lower_shadow'", "'lower_shadow%'", 
      "'rsi'", "'rsi_slope'", "'ma'", "'ema'", "'macd_value'", "'macd_signal'", 
      "'macd_histogram'", "'bb_upper'", "'bb_middle'", "'bb_lower'", "'macd_n_dinh'", 
      "'macd_slope'", "'bullish_engulfing'", "'bearish_engulfing'", "'bullish_hammer'", 
      "'bearish_hammer'", "'bullish'", "'bearish'", "'marsi'", "'doji'", 
      "'avg_open'", "'avg_high'", "'avg_low'", "'avg_close'", "'avg_ampl'", 
      "'avg_ampl%'", "'max_open'", "'max_high'", "'max_low'", "'max_close'", 
      "'min_open'", "'min_high'", "'min_low'", "'min_close'", "'min_rsi'", 
      "'max_rsi'", "'min_change'", "'max_change'", "'min_change%'", "'max_change%'", 
      "'min_ampl'", "'max_ampl'", "'min_ampl%'", "'max_ampl%'", "'>'", "'>='", 
      "'<'", "'<='", "'=='", "'='"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "INT", "FLOAT", "STRING", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,79,792,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
  	6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
  	10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
  	12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
  	17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
  	19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
  	41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,
  	45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
  	51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
  	52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
  	65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
  	68,1,68,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,
  	73,1,74,1,74,1,75,3,75,754,8,75,1,75,4,75,757,8,75,11,75,12,75,758,1,
  	76,3,76,762,8,76,1,76,4,76,765,8,76,11,76,12,76,766,1,76,1,76,4,76,771,
  	8,76,11,76,12,76,772,3,76,775,8,76,1,77,1,77,5,77,779,8,77,10,77,12,77,
  	782,9,77,1,77,1,77,1,78,4,78,787,8,78,11,78,12,78,788,1,78,1,78,0,0,79,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
  	75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
  	49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
  	59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,
  	69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,
  	79,1,0,3,1,0,48,57,3,0,10,10,13,13,39,39,3,0,9,10,13,13,32,32,799,0,1,
  	1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
  	0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
  	1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
  	0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
  	0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
  	1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
  	0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
  	0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
  	1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
  	0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
  	0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
  	0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,
  	0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,
  	0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,
  	0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,
  	0,0,1,159,1,0,0,0,3,161,1,0,0,0,5,163,1,0,0,0,7,165,1,0,0,0,9,167,1,0,
  	0,0,11,169,1,0,0,0,13,171,1,0,0,0,15,176,1,0,0,0,17,181,1,0,0,0,19,183,
  	1,0,0,0,21,188,1,0,0,0,23,193,1,0,0,0,25,200,1,0,0,0,27,205,1,0,0,0,29,
  	210,1,0,0,0,31,214,1,0,0,0,33,220,1,0,0,0,35,227,1,0,0,0,37,234,1,0,0,
  	0,39,242,1,0,0,0,41,247,1,0,0,0,43,253,1,0,0,0,45,266,1,0,0,0,47,280,
  	1,0,0,0,49,293,1,0,0,0,51,307,1,0,0,0,53,311,1,0,0,0,55,321,1,0,0,0,57,
  	324,1,0,0,0,59,328,1,0,0,0,61,339,1,0,0,0,63,351,1,0,0,0,65,366,1,0,0,
  	0,67,375,1,0,0,0,69,385,1,0,0,0,71,394,1,0,0,0,73,406,1,0,0,0,75,417,
  	1,0,0,0,77,435,1,0,0,0,79,453,1,0,0,0,81,468,1,0,0,0,83,483,1,0,0,0,85,
  	491,1,0,0,0,87,499,1,0,0,0,89,505,1,0,0,0,91,510,1,0,0,0,93,519,1,0,0,
  	0,95,528,1,0,0,0,97,536,1,0,0,0,99,546,1,0,0,0,101,555,1,0,0,0,103,565,
  	1,0,0,0,105,574,1,0,0,0,107,583,1,0,0,0,109,591,1,0,0,0,111,601,1,0,0,
  	0,113,610,1,0,0,0,115,619,1,0,0,0,117,627,1,0,0,0,119,637,1,0,0,0,121,
  	645,1,0,0,0,123,653,1,0,0,0,125,664,1,0,0,0,127,675,1,0,0,0,129,687,1,
  	0,0,0,131,699,1,0,0,0,133,708,1,0,0,0,135,717,1,0,0,0,137,727,1,0,0,0,
  	139,737,1,0,0,0,141,739,1,0,0,0,143,742,1,0,0,0,145,744,1,0,0,0,147,747,
  	1,0,0,0,149,750,1,0,0,0,151,753,1,0,0,0,153,761,1,0,0,0,155,776,1,0,0,
  	0,157,786,1,0,0,0,159,160,5,42,0,0,160,2,1,0,0,0,161,162,5,47,0,0,162,
  	4,1,0,0,0,163,164,5,43,0,0,164,6,1,0,0,0,165,166,5,45,0,0,166,8,1,0,0,
  	0,167,168,5,40,0,0,168,10,1,0,0,0,169,170,5,41,0,0,170,12,1,0,0,0,171,
  	172,5,97,0,0,172,173,5,98,0,0,173,174,5,115,0,0,174,175,5,40,0,0,175,
  	14,1,0,0,0,176,177,5,109,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,
  	180,5,40,0,0,180,16,1,0,0,0,181,182,5,44,0,0,182,18,1,0,0,0,183,184,5,
  	109,0,0,184,185,5,97,0,0,185,186,5,120,0,0,186,187,5,40,0,0,187,20,1,
  	0,0,0,188,189,5,104,0,0,189,190,5,111,0,0,190,191,5,117,0,0,191,192,5,
  	114,0,0,192,22,1,0,0,0,193,194,5,109,0,0,194,195,5,105,0,0,195,196,5,
  	110,0,0,196,197,5,117,0,0,197,198,5,116,0,0,198,199,5,101,0,0,199,24,
  	1,0,0,0,200,201,5,111,0,0,201,202,5,112,0,0,202,203,5,101,0,0,203,204,
  	5,110,0,0,204,26,1,0,0,0,205,206,5,104,0,0,206,207,5,105,0,0,207,208,
  	5,103,0,0,208,209,5,104,0,0,209,28,1,0,0,0,210,211,5,108,0,0,211,212,
  	5,111,0,0,212,213,5,119,0,0,213,30,1,0,0,0,214,215,5,99,0,0,215,216,5,
  	108,0,0,216,217,5,111,0,0,217,218,5,115,0,0,218,219,5,101,0,0,219,32,
  	1,0,0,0,220,221,5,118,0,0,221,222,5,111,0,0,222,223,5,108,0,0,223,224,
  	5,117,0,0,224,225,5,109,0,0,225,226,5,101,0,0,226,34,1,0,0,0,227,228,
  	5,99,0,0,228,229,5,104,0,0,229,230,5,97,0,0,230,231,5,110,0,0,231,232,
  	5,103,0,0,232,233,5,101,0,0,233,36,1,0,0,0,234,235,5,99,0,0,235,236,5,
  	104,0,0,236,237,5,97,0,0,237,238,5,110,0,0,238,239,5,103,0,0,239,240,
  	5,101,0,0,240,241,5,37,0,0,241,38,1,0,0,0,242,243,5,97,0,0,243,244,5,
  	109,0,0,244,245,5,112,0,0,245,246,5,108,0,0,246,40,1,0,0,0,247,248,5,
  	97,0,0,248,249,5,109,0,0,249,250,5,112,0,0,250,251,5,108,0,0,251,252,
  	5,37,0,0,252,42,1,0,0,0,253,254,5,117,0,0,254,255,5,112,0,0,255,256,5,
  	112,0,0,256,257,5,101,0,0,257,258,5,114,0,0,258,259,5,95,0,0,259,260,
  	5,115,0,0,260,261,5,104,0,0,261,262,5,97,0,0,262,263,5,100,0,0,263,264,
  	5,111,0,0,264,265,5,119,0,0,265,44,1,0,0,0,266,267,5,117,0,0,267,268,
  	5,112,0,0,268,269,5,112,0,0,269,270,5,101,0,0,270,271,5,114,0,0,271,272,
  	5,95,0,0,272,273,5,115,0,0,273,274,5,104,0,0,274,275,5,97,0,0,275,276,
  	5,100,0,0,276,277,5,111,0,0,277,278,5,119,0,0,278,279,5,37,0,0,279,46,
  	1,0,0,0,280,281,5,108,0,0,281,282,5,111,0,0,282,283,5,119,0,0,283,284,
  	5,101,0,0,284,285,5,114,0,0,285,286,5,95,0,0,286,287,5,115,0,0,287,288,
  	5,104,0,0,288,289,5,97,0,0,289,290,5,100,0,0,290,291,5,111,0,0,291,292,
  	5,119,0,0,292,48,1,0,0,0,293,294,5,108,0,0,294,295,5,111,0,0,295,296,
  	5,119,0,0,296,297,5,101,0,0,297,298,5,114,0,0,298,299,5,95,0,0,299,300,
  	5,115,0,0,300,301,5,104,0,0,301,302,5,97,0,0,302,303,5,100,0,0,303,304,
  	5,111,0,0,304,305,5,119,0,0,305,306,5,37,0,0,306,50,1,0,0,0,307,308,5,
  	114,0,0,308,309,5,115,0,0,309,310,5,105,0,0,310,52,1,0,0,0,311,312,5,
  	114,0,0,312,313,5,115,0,0,313,314,5,105,0,0,314,315,5,95,0,0,315,316,
  	5,115,0,0,316,317,5,108,0,0,317,318,5,111,0,0,318,319,5,112,0,0,319,320,
  	5,101,0,0,320,54,1,0,0,0,321,322,5,109,0,0,322,323,5,97,0,0,323,56,1,
  	0,0,0,324,325,5,101,0,0,325,326,5,109,0,0,326,327,5,97,0,0,327,58,1,0,
  	0,0,328,329,5,109,0,0,329,330,5,97,0,0,330,331,5,99,0,0,331,332,5,100,
  	0,0,332,333,5,95,0,0,333,334,5,118,0,0,334,335,5,97,0,0,335,336,5,108,
  	0,0,336,337,5,117,0,0,337,338,5,101,0,0,338,60,1,0,0,0,339,340,5,109,
  	0,0,340,341,5,97,0,0,341,342,5,99,0,0,342,343,5,100,0,0,343,344,5,95,
  	0,0,344,345,5,115,0,0,345,346,5,105,0,0,346,347,5,103,0,0,347,348,5,110,
  	0,0,348,349,5,97,0,0,349,350,5,108,0,0,350,62,1,0,0,0,351,352,5,109,0,
  	0,352,353,5,97,0,0,353,354,5,99,0,0,354,355,5,100,0,0,355,356,5,95,0,
  	0,356,357,5,104,0,0,357,358,5,105,0,0,358,359,5,115,0,0,359,360,5,116,
  	0,0,360,361,5,111,0,0,361,362,5,103,0,0,362,363,5,114,0,0,363,364,5,97,
  	0,0,364,365,5,109,0,0,365,64,1,0,0,0,366,367,5,98,0,0,367,368,5,98,0,
  	0,368,369,5,95,0,0,369,370,5,117,0,0,370,371,5,112,0,0,371,372,5,112,
  	0,0,372,373,5,101,0,0,373,374,5,114,0,0,374,66,1,0,0,0,375,376,5,98,0,
  	0,376,377,5,98,0,0,377,378,5,95,0,0,378,379,5,109,0,0,379,380,5,105,0,
  	0,380,381,5,100,0,0,381,382,5,100,0,0,382,383,5,108,0,0,383,384,5,101,
  	0,0,384,68,1,0,0,0,385,386,5,98,0,0,386,387,5,98,0,0,387,388,5,95,0,0,
  	388,389,5,108,0,0,389,390,5,111,0,0,390,391,5,119,0,0,391,392,5,101,0,
  	0,392,393,5,114,0,0,393,70,1,0,0,0,394,395,5,109,0,0,395,396,5,97,0,0,
  	396,397,5,99,0,0,397,398,5,100,0,0,398,399,5,95,0,0,399,400,5,110,0,0,
  	400,401,5,95,0,0,401,402,5,100,0,0,402,403,5,105,0,0,403,404,5,110,0,
  	0,404,405,5,104,0,0,405,72,1,0,0,0,406,407,5,109,0,0,407,408,5,97,0,0,
  	408,409,5,99,0,0,409,410,5,100,0,0,410,411,5,95,0,0,411,412,5,115,0,0,
  	412,413,5,108,0,0,413,414,5,111,0,0,414,415,5,112,0,0,415,416,5,101,0,
  	0,416,74,1,0,0,0,417,418,5,98,0,0,418,419,5,117,0,0,419,420,5,108,0,0,
  	420,421,5,108,0,0,421,422,5,105,0,0,422,423,5,115,0,0,423,424,5,104,0,
  	0,424,425,5,95,0,0,425,426,5,101,0,0,426,427,5,110,0,0,427,428,5,103,
  	0,0,428,429,5,117,0,0,429,430,5,108,0,0,430,431,5,102,0,0,431,432,5,105,
  	0,0,432,433,5,110,0,0,433,434,5,103,0,0,434,76,1,0,0,0,435,436,5,98,0,
  	0,436,437,5,101,0,0,437,438,5,97,0,0,438,439,5,114,0,0,439,440,5,105,
  	0,0,440,441,5,115,0,0,441,442,5,104,0,0,442,443,5,95,0,0,443,444,5,101,
  	0,0,444,445,5,110,0,0,445,446,5,103,0,0,446,447,5,117,0,0,447,448,5,108,
  	0,0,448,449,5,102,0,0,449,450,5,105,0,0,450,451,5,110,0,0,451,452,5,103,
  	0,0,452,78,1,0,0,0,453,454,5,98,0,0,454,455,5,117,0,0,455,456,5,108,0,
  	0,456,457,5,108,0,0,457,458,5,105,0,0,458,459,5,115,0,0,459,460,5,104,
  	0,0,460,461,5,95,0,0,461,462,5,104,0,0,462,463,5,97,0,0,463,464,5,109,
  	0,0,464,465,5,109,0,0,465,466,5,101,0,0,466,467,5,114,0,0,467,80,1,0,
  	0,0,468,469,5,98,0,0,469,470,5,101,0,0,470,471,5,97,0,0,471,472,5,114,
  	0,0,472,473,5,105,0,0,473,474,5,115,0,0,474,475,5,104,0,0,475,476,5,95,
  	0,0,476,477,5,104,0,0,477,478,5,97,0,0,478,479,5,109,0,0,479,480,5,109,
  	0,0,480,481,5,101,0,0,481,482,5,114,0,0,482,82,1,0,0,0,483,484,5,98,0,
  	0,484,485,5,117,0,0,485,486,5,108,0,0,486,487,5,108,0,0,487,488,5,105,
  	0,0,488,489,5,115,0,0,489,490,5,104,0,0,490,84,1,0,0,0,491,492,5,98,0,
  	0,492,493,5,101,0,0,493,494,5,97,0,0,494,495,5,114,0,0,495,496,5,105,
  	0,0,496,497,5,115,0,0,497,498,5,104,0,0,498,86,1,0,0,0,499,500,5,109,
  	0,0,500,501,5,97,0,0,501,502,5,114,0,0,502,503,5,115,0,0,503,504,5,105,
  	0,0,504,88,1,0,0,0,505,506,5,100,0,0,506,507,5,111,0,0,507,508,5,106,
  	0,0,508,509,5,105,0,0,509,90,1,0,0,0,510,511,5,97,0,0,511,512,5,118,0,
  	0,512,513,5,103,0,0,513,514,5,95,0,0,514,515,5,111,0,0,515,516,5,112,
  	0,0,516,517,5,101,0,0,517,518,5,110,0,0,518,92,1,0,0,0,519,520,5,97,0,
  	0,520,521,5,118,0,0,521,522,5,103,0,0,522,523,5,95,0,0,523,524,5,104,
  	0,0,524,525,5,105,0,0,525,526,5,103,0,0,526,527,5,104,0,0,527,94,1,0,
  	0,0,528,529,5,97,0,0,529,530,5,118,0,0,530,531,5,103,0,0,531,532,5,95,
  	0,0,532,533,5,108,0,0,533,534,5,111,0,0,534,535,5,119,0,0,535,96,1,0,
  	0,0,536,537,5,97,0,0,537,538,5,118,0,0,538,539,5,103,0,0,539,540,5,95,
  	0,0,540,541,5,99,0,0,541,542,5,108,0,0,542,543,5,111,0,0,543,544,5,115,
  	0,0,544,545,5,101,0,0,545,98,1,0,0,0,546,547,5,97,0,0,547,548,5,118,0,
  	0,548,549,5,103,0,0,549,550,5,95,0,0,550,551,5,97,0,0,551,552,5,109,0,
  	0,552,553,5,112,0,0,553,554,5,108,0,0,554,100,1,0,0,0,555,556,5,97,0,
  	0,556,557,5,118,0,0,557,558,5,103,0,0,558,559,5,95,0,0,559,560,5,97,0,
  	0,560,561,5,109,0,0,561,562,5,112,0,0,562,563,5,108,0,0,563,564,5,37,
  	0,0,564,102,1,0,0,0,565,566,5,109,0,0,566,567,5,97,0,0,567,568,5,120,
  	0,0,568,569,5,95,0,0,569,570,5,111,0,0,570,571,5,112,0,0,571,572,5,101,
  	0,0,572,573,5,110,0,0,573,104,1,0,0,0,574,575,5,109,0,0,575,576,5,97,
  	0,0,576,577,5,120,0,0,577,578,5,95,0,0,578,579,5,104,0,0,579,580,5,105,
  	0,0,580,581,5,103,0,0,581,582,5,104,0,0,582,106,1,0,0,0,583,584,5,109,
  	0,0,584,585,5,97,0,0,585,586,5,120,0,0,586,587,5,95,0,0,587,588,5,108,
  	0,0,588,589,5,111,0,0,589,590,5,119,0,0,590,108,1,0,0,0,591,592,5,109,
  	0,0,592,593,5,97,0,0,593,594,5,120,0,0,594,595,5,95,0,0,595,596,5,99,
  	0,0,596,597,5,108,0,0,597,598,5,111,0,0,598,599,5,115,0,0,599,600,5,101,
  	0,0,600,110,1,0,0,0,601,602,5,109,0,0,602,603,5,105,0,0,603,604,5,110,
  	0,0,604,605,5,95,0,0,605,606,5,111,0,0,606,607,5,112,0,0,607,608,5,101,
  	0,0,608,609,5,110,0,0,609,112,1,0,0,0,610,611,5,109,0,0,611,612,5,105,
  	0,0,612,613,5,110,0,0,613,614,5,95,0,0,614,615,5,104,0,0,615,616,5,105,
  	0,0,616,617,5,103,0,0,617,618,5,104,0,0,618,114,1,0,0,0,619,620,5,109,
  	0,0,620,621,5,105,0,0,621,622,5,110,0,0,622,623,5,95,0,0,623,624,5,108,
  	0,0,624,625,5,111,0,0,625,626,5,119,0,0,626,116,1,0,0,0,627,628,5,109,
  	0,0,628,629,5,105,0,0,629,630,5,110,0,0,630,631,5,95,0,0,631,632,5,99,
  	0,0,632,633,5,108,0,0,633,634,5,111,0,0,634,635,5,115,0,0,635,636,5,101,
  	0,0,636,118,1,0,0,0,637,638,5,109,0,0,638,639,5,105,0,0,639,640,5,110,
  	0,0,640,641,5,95,0,0,641,642,5,114,0,0,642,643,5,115,0,0,643,644,5,105,
  	0,0,644,120,1,0,0,0,645,646,5,109,0,0,646,647,5,97,0,0,647,648,5,120,
  	0,0,648,649,5,95,0,0,649,650,5,114,0,0,650,651,5,115,0,0,651,652,5,105,
  	0,0,652,122,1,0,0,0,653,654,5,109,0,0,654,655,5,105,0,0,655,656,5,110,
  	0,0,656,657,5,95,0,0,657,658,5,99,0,0,658,659,5,104,0,0,659,660,5,97,
  	0,0,660,661,5,110,0,0,661,662,5,103,0,0,662,663,5,101,0,0,663,124,1,0,
  	0,0,664,665,5,109,0,0,665,666,5,97,0,0,666,667,5,120,0,0,667,668,5,95,
  	0,0,668,669,5,99,0,0,669,670,5,104,0,0,670,671,5,97,0,0,671,672,5,110,
  	0,0,672,673,5,103,0,0,673,674,5,101,0,0,674,126,1,0,0,0,675,676,5,109,
  	0,0,676,677,5,105,0,0,677,678,5,110,0,0,678,679,5,95,0,0,679,680,5,99,
  	0,0,680,681,5,104,0,0,681,682,5,97,0,0,682,683,5,110,0,0,683,684,5,103,
  	0,0,684,685,5,101,0,0,685,686,5,37,0,0,686,128,1,0,0,0,687,688,5,109,
  	0,0,688,689,5,97,0,0,689,690,5,120,0,0,690,691,5,95,0,0,691,692,5,99,
  	0,0,692,693,5,104,0,0,693,694,5,97,0,0,694,695,5,110,0,0,695,696,5,103,
  	0,0,696,697,5,101,0,0,697,698,5,37,0,0,698,130,1,0,0,0,699,700,5,109,
  	0,0,700,701,5,105,0,0,701,702,5,110,0,0,702,703,5,95,0,0,703,704,5,97,
  	0,0,704,705,5,109,0,0,705,706,5,112,0,0,706,707,5,108,0,0,707,132,1,0,
  	0,0,708,709,5,109,0,0,709,710,5,97,0,0,710,711,5,120,0,0,711,712,5,95,
  	0,0,712,713,5,97,0,0,713,714,5,109,0,0,714,715,5,112,0,0,715,716,5,108,
  	0,0,716,134,1,0,0,0,717,718,5,109,0,0,718,719,5,105,0,0,719,720,5,110,
  	0,0,720,721,5,95,0,0,721,722,5,97,0,0,722,723,5,109,0,0,723,724,5,112,
  	0,0,724,725,5,108,0,0,725,726,5,37,0,0,726,136,1,0,0,0,727,728,5,109,
  	0,0,728,729,5,97,0,0,729,730,5,120,0,0,730,731,5,95,0,0,731,732,5,97,
  	0,0,732,733,5,109,0,0,733,734,5,112,0,0,734,735,5,108,0,0,735,736,5,37,
  	0,0,736,138,1,0,0,0,737,738,5,62,0,0,738,140,1,0,0,0,739,740,5,62,0,0,
  	740,741,5,61,0,0,741,142,1,0,0,0,742,743,5,60,0,0,743,144,1,0,0,0,744,
  	745,5,60,0,0,745,746,5,61,0,0,746,146,1,0,0,0,747,748,5,61,0,0,748,749,
  	5,61,0,0,749,148,1,0,0,0,750,751,5,61,0,0,751,150,1,0,0,0,752,754,5,45,
  	0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,757,7,0,0,0,756,
  	755,1,0,0,0,757,758,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,152,1,
  	0,0,0,760,762,5,45,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,
  	0,763,765,7,0,0,0,764,763,1,0,0,0,765,766,1,0,0,0,766,764,1,0,0,0,766,
  	767,1,0,0,0,767,768,1,0,0,0,768,774,5,46,0,0,769,771,7,0,0,0,770,769,
  	1,0,0,0,771,772,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,
  	0,774,770,1,0,0,0,774,775,1,0,0,0,775,154,1,0,0,0,776,780,5,39,0,0,777,
  	779,8,1,0,0,778,777,1,0,0,0,779,782,1,0,0,0,780,778,1,0,0,0,780,781,1,
  	0,0,0,781,783,1,0,0,0,782,780,1,0,0,0,783,784,5,39,0,0,784,156,1,0,0,
  	0,785,787,7,2,0,0,786,785,1,0,0,0,787,788,1,0,0,0,788,786,1,0,0,0,788,
  	789,1,0,0,0,789,790,1,0,0,0,790,791,6,78,0,0,791,158,1,0,0,0,9,0,753,
  	758,761,766,772,774,780,788,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  exprlexerLexerStaticData = staticData.release();
}

}

ExprLexer::ExprLexer(CharStream *input) : Lexer(input) {
  ExprLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *exprlexerLexerStaticData->atn, exprlexerLexerStaticData->decisionToDFA, exprlexerLexerStaticData->sharedContextCache);
}

ExprLexer::~ExprLexer() {
  delete _interpreter;
}

std::string ExprLexer::getGrammarFileName() const {
  return "Expr.g4";
}

const std::vector<std::string>& ExprLexer::getRuleNames() const {
  return exprlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ExprLexer::getChannelNames() const {
  return exprlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ExprLexer::getModeNames() const {
  return exprlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ExprLexer::getVocabulary() const {
  return exprlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ExprLexer::getSerializedATN() const {
  return exprlexerLexerStaticData->serializedATN;
}

const atn::ATN& ExprLexer::getATN() const {
  return *exprlexerLexerStaticData->atn;
}




void ExprLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  exprlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(exprlexerLexerOnceFlag, exprlexerLexerInitialize);
#endif
}
